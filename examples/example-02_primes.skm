;; Defining basic functions
(bind (not (func (e)
                 (nand true e))

       and (func (a b)
                 (not (nand a b)))

       or (func (a b)
                (nand (not a)
                      (not b)))

       + (func (a b)
               (- a (- b)))

       * (func (a b)
               (if (or (= a 0)
                       (= b 0))
                 0
                 (if (= b 1)
                   a
                   (if (= a 1)
                     b
                     (+ a (recur a (- b 1)))))))

       / (func (a b)
               (if (= b 0)
                 ##Inf
                 (if (< a b)
                   0
                   (+ 1 (recur (- a b) b)))))

       % (func (a b)
               (if (= a b)
                 0
                 (if (< a b)
                   a
                   (recur (- a b) b))))

       <= (func (a b)
                (or (< a b)
                    (= a b)))

       > (func (a b)
               (and (not (= a b))
                    (not (< a b))))

       >= (func (a b)
                (or (> a b)
                    (= a b))))

      ;; Utility functions
      (bind (range (func (n)
                         (bind (f (func (values n)
                                        (if (= 0 n)
                                          values
                                          (recur (cons n values) (- n 1)))))
                               (f (quote ()) n)))

             count (func (values)
                         (bind (f (func (vs c)
                                        (if (= vs (quote ()))
                                          c
                                          (recur (rest vs) (+ 1 c)))))
                               (f values 0)))

             map (func (mf xs)
                       (bind (f (func (acc mf xs)
                                      (if (= 0 (count xs))
                                        acc
                                        (bind (head (first xs)
                                                    tail (rest xs))
                                              (cons (mf head) (recur acc mf tail))))))
                             (f (quote ()) mf xs)))

             filter (func (pf xs)
                          (bind (f (func (acc pf xs)
                                         (if (= 0 (count xs))
                                           acc
                                           (bind (head (first xs)
                                                  tail (rest xs))
                                                 (if (pf head)
                                                   (cons head (recur acc pf tail))
                                                   (recur acc pf tail))))))
                                (f (quote ()) pf xs)))

             divisors (func (n)
                            (bind (possibles (range (/ n 2)))
                                  (filter (func (i)
                                                (= 0 (% n i)))
                                          possibles)))

             prime? (func (n)
                          (= 1 (count (divisors n)))))

            (filter prime? (range 100))))
