;;; If we list all the natural numbers below 10 that are multiples of
;;; 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
;;;
;;; Find the sum of all the multiples of 3 or 5 below 1000.

(bind (not (func (e)
                 (nand true e))

       or (func (a b)
                    (nand (not a)
                          (not b)))

       + (func (a b)
               (- a (- b)))

       % (func (a b)
               (if (= a b)
                 0
                 (if (< a b)
                   a
                   (recur (- a b) b))))

       range (func (n)
                   (bind (f (func (values n)
                                  (if (= 0 n)
                                    values
                                    (recur (cons n values) (- n 1)))))
                         (f (quote ()) n)))

       count (func (values)
                   (bind (f (func (vs c)
                                  (if (= vs (quote ()))
                                    c
                                    (recur (rest vs) (+ 1 c)))))
                         (f values 0)))

       map (func (mf xs)
                 (bind (f (func (acc mf xs)
                                (if (= 0 (count xs))
                                  acc
                                  (bind (head (first xs)
                                              tail (rest xs))
                                        (cons (mf head) (recur acc mf tail))))))
                       (f (quote ()) mf xs)))

       filter (func (pf xs)
                    (bind (f (func (acc pf xs)
                                   (if (= 0 (count xs))
                                     acc
                                     (bind (head (first xs)
                                                 tail (rest xs))
                                           (if (pf head)
                                             (cons head (recur acc pf tail))
                                             (recur acc pf tail))))))
                          (f (quote ()) pf xs)))

       reduce (func (rf acc xs)
                    (if (= 0 (count xs))
                      acc
                      (bind (head (first xs)
                                  tail (rest xs))
                            (recur rf (rf acc head) tail))))

       multiple-3-or-5? (func (n)
                              (or (= 0 (% n 3))
                                  (= 0 (% n 5)))))

      ;; Trying to do it all in one go throws a StackOverflowException
      (+ (reduce + 0 (filter multiple-3-or-5? (range 500)))
         (reduce + 0 (filter multiple-3-or-5? (map (func (n) (+ n 500)) (range 499))))))
